import os
import json
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')

async def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        import aiohttp
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                return await response.json()
    except Exception as e:
        logger.error(f"Error sending message: {e}")
        return None

async def process_update(update_data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram"""
    try:
        if 'message' in update_data:
            message = update_data['message']
            chat_id = message['chat']['id']
            text = message.get('text', '')
            
            if text == '/start':
                response_text = "üïâÔ∏è –ë–æ—Ç –ë—Ö–∞–≥–∞–≤–∞–¥-–ì–∏—Ç—ã –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quote –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã."
            elif text == '/quote':
                response_text = """
üïâÔ∏è <b>–ë—Ö–∞–≥–∞–≤–∞–¥-–ì–∏—Ç–∞, –ì–ª–∞–≤–∞ 2, –°—Ç–∏—Ö 47</b>

<b>–®–ª–æ–∫–∞:</b>
–∫–∞—Ä–º–∞·πáy-evƒÅdhikƒÅras te mƒÅ phale·π£hu kadƒÅchana
mƒÅ karma-phala-hetur bh≈´r mƒÅ te sa·πÖgo 'stvakarma·πái

<b>–ü–µ—Ä–µ–≤–æ–¥:</b>
–¢—ã –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–∞ –µ–≥–æ –ø–ª–æ–¥—ã.
–ü—É—Å—Ç—å –ø–ª–æ–¥—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –±—É–¥—É—Ç —Ç–≤–æ–∏–º –º–æ—Ç–∏–≤–æ–º, –∏ –Ω–µ –±—É–¥—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—é.
                """
            elif text == '/help':
                response_text = "–ü–æ–º–æ—â—å: /start, /quote, /help"
            else:
                response_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
            
            await send_telegram_message(chat_id, response_text)
            
        return True
    except Exception as e:
        logger.error(f"Error processing update: {e}")
        return False

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
async def app(request):
    try:
        # GET –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        if request.method == 'GET':
            return {
                'statusCode': 200,
                'headers': {'Content-Type': 'application/json'},
                'body': json.dumps({
                    'status': 'Bot is running', 
                    'ok': True,
                    'token_set': bool(BOT_TOKEN)
                })
            }
        
        # POST –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram
        elif request.method == 'POST':
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            body = await request.body()
            body_str = body.decode('utf-8')
            data = json.loads(body_str)
            
            logger.info(f"Received update from Telegram")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            result = await process_update(data)
            
            return {
                'statusCode': 200,
                'headers': {'Content-Type': 'application/json'},
                'body': json.dumps({'status': 'ok' if result else 'error'})
            }
            
    except Exception as e:
        logger.error(f"Error in handler: {e}")
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'status': 'error', 'message': str(e)})
        }
