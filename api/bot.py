import os
import json
import logging
import asyncio
from http.server import BaseHTTPRequestHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')

async def process_telegram_update(update_data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram"""
    try:
        from telegram import Update
        from telegram.ext import Application, CommandHandler, ContextTypes
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text("üïâÔ∏è –ë–æ—Ç –ë—Ö–∞–≥–∞–≤–∞–¥-–ì–∏—Ç—ã –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quote –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã.")
        
        async def quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
            quote_text = """
üïâÔ∏è **–ë—Ö–∞–≥–∞–≤–∞–¥-–ì–∏—Ç–∞, –ì–ª–∞–≤–∞ 2, –°—Ç–∏—Ö 47**

**–®–ª–æ–∫–∞:**
–∫–∞—Ä–º–∞·πáy-evƒÅdhikƒÅras te mƒÅ phale·π£hu kadƒÅchana
mƒÅ karma-phala-hetur bh≈´r mƒÅ te sa·πÖgo 'stvakarma·πái

**–ü–µ—Ä–µ–≤–æ–¥:**
–¢—ã –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–∞ –µ–≥–æ –ø–ª–æ–¥—ã.
–ü—É—Å—Ç—å –ø–ª–æ–¥—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –±—É–¥—É—Ç —Ç–≤–æ–∏–º –º–æ—Ç–∏–≤–æ–º, –∏ –Ω–µ –±—É–¥—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—é.
            """
            await update.message.reply_text(quote_text)
        
        async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text("–ü–æ–º–æ—â—å: /start, /quote, /help")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("quote", quote))
        application.add_handler(CommandHandler("help", help_command))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        update = Update.de_json(update_data, application.bot)
        await application.initialize()
        await application.process_update(update)
        await application.shutdown()
        
        return True
    except Exception as e:
        logger.error(f"Error processing update: {e}")
        return False

class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        response = json.dumps({"status": "Bot is running", "ok": True})
        self.wfile.write(response.encode())
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            update_data = json.loads(post_data.decode('utf-8'))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            result = loop.run_until_complete(process_telegram_update(update_data))
            loop.close()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = json.dumps({"status": "ok" if result else "error"})
            self.wfile.write(response.encode())
            
        except Exception as e:
            logger.error(f"Error in POST handler: {e}")
            self.send_response(200)  # –í—Å–µ–≥–¥–∞ 200 –¥–ª—è Telegram
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = json.dumps({"status": "error", "message": str(e)})
            self.wfile.write(response.encode())

# Vercel –∏—â–µ—Ç —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
def app(environ, start_response):
    """WSGI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    handler = Handler(environ, start_response)
    return handler
