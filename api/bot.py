import os
import logging
import random
import requests
import json
import html
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã API –ì–∏—Ç—ã ---
GITA_API_BASE_URL = "https://api.bhagavadgita.io/v2"

# --- –°–æ–∑–¥–∞–Ω–∏–µ Application ---
application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç ---
def fetch_random_verse_from_api():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏—Ö –∏–∑ API."""
    verses_per_chapter = [47, 72, 43, 42, 29, 47, 30, 28, 34, 42, 55, 20, 18, 24, 20, 24, 28, 78]
    
    try:
        random_chapter = random.randint(1, 18)
        max_verse_in_chapter = verses_per_chapter[random_chapter - 1]
        random_verse_in_chapter = random.randint(1, max_verse_in_chapter)
        
        api_url = f"{GITA_API_BASE_URL}/chapter/{random_chapter}/verse/{random_verse_in_chapter}"
        
        headers = {
            'accept': 'application/json',
        }
        
        response = requests.get(api_url, headers=headers, params={'language': 'english'})
        response.raise_for_status()
        data = response.json()
        
        if 'chapter' not in data:
            data['chapter'] = random_chapter
        if 'verse' not in data:
            data['verse'] = random_verse_in_chapter
            
        return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –ì–∏—Ç—ã: {e}")
        return None

def load_quotes_from_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ü–∏—Ç–∞—Ç—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    try:
        with open('api/quotes.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ quotes.json: {e}")
        return []

def fetch_random_verse_from_file():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON-—Ñ–∞–π–ª–∞."""
    try:
        local_quotes = load_quotes_from_file()
        if not local_quotes:
            return None
        selected_verse = random.choice(local_quotes)
        if 'chapter' not in selected_verse:
            selected_verse['chapter'] = 'N/A'
        if 'verse' not in selected_verse:
            selected_verse['verse'] = 'N/A'
        return selected_verse
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞: {e}")
        return None

async def fetch_random_verse():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏—Ö."""
    logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –∏–∑ API...")
    
    import asyncio
    verse_data = await asyncio.get_event_loop().run_in_executor(None, fetch_random_verse_from_api)
    
    if verse_data is not None:
        logger.info("–¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ API.")
        return verse_data
    else:
        logger.warning("API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π —Ñ–∞–π–ª.")
        file_verse = await asyncio.get_event_loop().run_in_executor(None, fetch_random_verse_from_file)
        return file_verse

def format_verse_message(verse_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–∏—Ö–∞ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    if not verse_data:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É."

    chapter = verse_data.get('chapter', 'N/A')
    verse_num = verse_data.get('verse', 'N/A')
    slok = verse_data.get('slok', '')
    translation = verse_data.get('translation', '')

    slok = html.escape(slok)
    translation = html.escape(translation)

    message_parts = [
        f"üïâÔ∏è <b>–ë—Ö–∞–≥–∞–≤–∞–¥-–ì–∏—Ç–∞, –ì–ª–∞–≤–∞ {chapter}, –°—Ç–∏—Ö {verse_num}</b>",
        "",
    ]
    if slok:
        message_parts.append(f"<b>–®–ª–æ–∫–∞ (–°–∞–Ω—Å–∫—Ä–∏—Ç):</b>\n{slok}")
    if translation:
        message_parts.append(f"\n<b>–ü–µ—Ä–µ–≤–æ–¥:</b>\n{translation}")
    
    return "\n".join(message_parts).strip()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    welcome_text = (
        "üïâÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –±–æ—Ç–µ –ë—Ö–∞–≥–∞–≤–∞–¥-–≥–∏—Ç—ã!\n\n"
        "–Ø –±—É–¥—É –¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π –º—É–¥—Ä—ã–º–∏ —Ü–∏—Ç–∞—Ç–∞–º–∏ (—à–ª–æ–∫–∞–º–∏) –∏–∑ —Å–≤—è—â–µ–Ω–Ω–æ–≥–æ –ø–∏—Å–∞–Ω–∏—è.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/quote - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É (—à–ª–æ–∫—É)\n"
        "/help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
        "/about - –æ –±–æ—Ç–µ\n\n"
        "–ü—É—Å—Ç—å —ç—Ç–∏ –∑–Ω–∞–Ω–∏—è –ø—Ä–∏–Ω–µ—Å—É—Ç —Ç–µ–±–µ –º–∏—Ä –∏ —è—Å–Ω–æ—Å—Ç—å! üôè"
    )
    await update.message.reply_text(welcome_text)

async def get_quote(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("‚è≥ –ü–æ–ª—É—á–∞—é –º—É–¥—Ä–æ—Å—Ç—å –∏–∑ –ì–∏—Ç—ã...")
    
    verse_data = await fetch_random_verse()
    message_text = format_verse_message(verse_data)
    await update.message.reply_text(message_text, parse_mode='HTML')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "üìñ –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:\n\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/quote - —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ (—à–ª–æ–∫–∞) –∏–∑ –ë—Ö–∞–≥–∞–≤–∞–¥-–≥–∏—Ç—ã\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"
    )
    await update.message.reply_text(help_text)

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    about_text = (
        "ü§ñ –û –≠–¢–û–ú –ë–û–¢–ï\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –º—É–¥—Ä–æ—Å—Ç–∏ –ë—Ö–∞–≥–∞–≤–∞–¥-–≥–∏—Ç—ã.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏—Ö —Ü–∏—Ç–∞—Ç –∏ –º—É–¥—Ä–æ—Å—Ç–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å."
    )
    await update.message.reply_text(about_text)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ ---
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("quote", get_quote))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(CommandHandler("about", about))

# --- Vercel Serverless Function Handler ---
async def handler(request):
    """
    Vercel Serverless Function handler.
    """
    try:
        # –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
        if request.method == 'GET':
            return {
                "statusCode": 200,
                "headers": {"Content-Type": "application/json"},
                "body": json.dumps({"status": "Bot is running", "ok": True})
            }
        
        # –î–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
        elif request.method == 'POST':
            body = await request.body()
            body_text = body.decode('utf-8')
            update_data = json.loads(body_text)
            
            update = Update.de_json(update_data, application.bot)
            
            await application.initialize()
            await application.process_update(update)
            await application.shutdown()
            
            return {
                "statusCode": 200,
                "headers": {"Content-Type": "application/json"},
                "body": json.dumps({"status": "ok"})
            }
        
        else:
            return {
                "statusCode": 405,
                "headers": {"Content-Type": "application/json"},
                "body": json.dumps({"error": "Method not allowed"})
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handler: {e}")
        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"status": "error", "message": str(e)})
        }

# Vercel —Ç—Ä–µ–±—É–µ—Ç —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
app = handler