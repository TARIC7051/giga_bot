import os
import json
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application = Application.builder().token(BOT_TOKEN).build()

# –ü—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üïâÔ∏è –ë–æ—Ç –ë—Ö–∞–≥–∞–≤–∞–¥-–ì–∏—Ç—ã –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quote –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã.")

async def quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ—Å—Ç–∞—è —Ü–∏—Ç–∞—Ç–∞ –≤–º–µ—Å—Ç–æ API
    quote_text = """
üïâÔ∏è **–ë—Ö–∞–≥–∞–≤–∞–¥-–ì–∏—Ç–∞, –ì–ª–∞–≤–∞ 2, –°—Ç–∏—Ö 47**

**–®–ª–æ–∫–∞:**
–∫–∞—Ä–º–∞·πáy-evƒÅdhikƒÅras te mƒÅ phale·π£hu kadƒÅchana
mƒÅ karma-phala-hetur bh≈´r mƒÅ te sa·πÖgo 'stvakarma·πái

**–ü–µ—Ä–µ–≤–æ–¥:**
–¢—ã –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–∞ –µ–≥–æ –ø–ª–æ–¥—ã.
–ü—É—Å—Ç—å –ø–ª–æ–¥—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –±—É–¥—É—Ç —Ç–≤–æ–∏–º –º–æ—Ç–∏–≤–æ–º, –∏ –Ω–µ –±—É–¥—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—é.
    """
    await update.message.reply_text(quote_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–º–æ—â—å: /start, /quote, /help")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("quote", quote))
application.add_handler(CommandHandler("help", help_command))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def initialize_app():
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
async def handler(request):
    try:
        # GET –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        if request.method == 'GET':
            return {
                'statusCode': 200,
                'headers': {'Content-Type': 'application/json'},
                'body': json.dumps({'status': 'Bot is running', 'ok': True})
            }
        
        # POST –∑–∞–ø—Ä–æ—Å - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        elif request.method == 'POST':
            body = await request.body()
            data = json.loads(body)
            
            update = Update.de_json(data, application.bot)
            await application.process_update(update)
            
            return {
                'statusCode': 200,
                'headers': {'Content-Type': 'application/json'},
                'body': json.dumps({'status': 'ok'})
            }
            
    except Exception as e:
        logger.error(f"Error: {e}")
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'status': 'error', 'message': str(e)})
        }

app = handler
